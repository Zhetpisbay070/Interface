// Code generated by mockery v2.51.0. DO NOT EDIT.

package mock

import (
	entity "awesomeProject1/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *DB) CreateOrder(ctx context.Context, order *entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type DB_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *entity.Order
func (_e *DB_Expecter) CreateOrder(ctx interface{}, order interface{}) *DB_CreateOrder_Call {
	return &DB_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *DB_CreateOrder_Call) Run(run func(ctx context.Context, order *entity.Order)) *DB_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Order))
	})
	return _c
}

func (_c *DB_CreateOrder_Call) Return(_a0 error) *DB_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_CreateOrder_Call) RunAndReturn(run func(context.Context, *entity.Order) error) *DB_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *DB) GetOrderByID(ctx context.Context, id string) (*entity.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_GetOrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByID'
type DB_GetOrderByID_Call struct {
	*mock.Call
}

// GetOrderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DB_Expecter) GetOrderByID(ctx interface{}, id interface{}) *DB_GetOrderByID_Call {
	return &DB_GetOrderByID_Call{Call: _e.mock.On("GetOrderByID", ctx, id)}
}

func (_c *DB_GetOrderByID_Call) Run(run func(ctx context.Context, id string)) *DB_GetOrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_GetOrderByID_Call) Return(_a0 *entity.Order, _a1 error) *DB_GetOrderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_GetOrderByID_Call) RunAndReturn(run func(context.Context, string) (*entity.Order, error)) *DB_GetOrderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, req
func (_m *DB) GetOrders(ctx context.Context, req *entity.GetOrders) ([]entity.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GetOrders) ([]entity.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GetOrders) []entity.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.GetOrders) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type DB_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - req *entity.GetOrders
func (_e *DB_Expecter) GetOrders(ctx interface{}, req interface{}) *DB_GetOrders_Call {
	return &DB_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, req)}
}

func (_c *DB_GetOrders_Call) Run(run func(ctx context.Context, req *entity.GetOrders)) *DB_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.GetOrders))
	})
	return _c
}

func (_c *DB_GetOrders_Call) Return(_a0 []entity.Order, _a1 error) *DB_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_GetOrders_Call) RunAndReturn(run func(context.Context, *entity.GetOrders) ([]entity.Order, error)) *DB_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ProductExist provides a mock function with given fields: ctx, productID
func (_m *DB) ProductExist(ctx context.Context, productID string) (bool, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for ProductExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_ProductExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProductExist'
type DB_ProductExist_Call struct {
	*mock.Call
}

// ProductExist is a helper method to define mock.On call
//   - ctx context.Context
//   - productID string
func (_e *DB_Expecter) ProductExist(ctx interface{}, productID interface{}) *DB_ProductExist_Call {
	return &DB_ProductExist_Call{Call: _e.mock.On("ProductExist", ctx, productID)}
}

func (_c *DB_ProductExist_Call) Run(run func(ctx context.Context, productID string)) *DB_ProductExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_ProductExist_Call) Return(_a0 bool, _a1 error) *DB_ProductExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_ProductExist_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *DB_ProductExist_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, order
func (_m *DB) UpdateOrder(ctx context.Context, order *entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type DB_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *entity.Order
func (_e *DB_Expecter) UpdateOrder(ctx interface{}, order interface{}) *DB_UpdateOrder_Call {
	return &DB_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, order)}
}

func (_c *DB_UpdateOrder_Call) Run(run func(ctx context.Context, order *entity.Order)) *DB_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Order))
	})
	return _c
}

func (_c *DB_UpdateOrder_Call) Return(_a0 error) *DB_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_UpdateOrder_Call) RunAndReturn(run func(context.Context, *entity.Order) error) *DB_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
